     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05                          a db 5
    15 00000001 03                          b db 3
    16 00000002 02                          c db 2
    17 00000003 0401                        d dw 260
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 66A1[03000000]                  mov ax, word [d]; AX = d
    23 00000006 F635[01000000]                  div byte [b]; AL = d(AX) / b
    24 0000000C 0205[01000000]                  add al, byte [b]; AL = b + d / b
    25 00000012 0205[02000000]                  add al, byte [c]; AL = b + c + d / b
    26 00000018 F625[00000000]                  mul byte [a]; AX = a * [b + c + d / b]
    27 0000001E 660305[03000000]                add ax, word [d]; AX = a * [b + c + d / b] + d
    28                                          
    29                                          ; exit(0)
    30 00000025 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    31 00000027 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
