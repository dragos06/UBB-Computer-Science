     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 03                          a db 3
    15 00000001 02                          b db 2
    16 00000002 04                          c db 4
    17 00000003 05                          d db 5
    18 00000004 0401                        e dw 260
    19 00000006 0301                        f dw 259
    20 00000008 0C01                        g dw 268
    21 0000000A 0601                        h dw 262
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25                                          ; ...
    26 00000000 A0[00000000]                    mov al, byte [a]; AL = a
    27 00000005 F625[03000000]                  mul byte [d]; AX = a * d
    28 0000000B 660305[04000000]                add ax, word [e]; AX = a * d + e
    29 00000012 6689C3                          mov bx, ax; BX = a * d + e
    30 00000015 66A1[0A000000]                  mov ax, word [h]; AX = h
    31 0000001B 8A0D[02000000]                  mov cl, byte [c]; CL = c
    32 00000021 2A0D[01000000]                  sub cl, byte [b]; CL = c - b
    33 00000027 F6F1                            div cl; AL = h / (c - b)
    34 00000029 0205[02000000]                  add al, byte [c]; AL = c + h / (c - b)
    35 0000002F 88C1                            mov cl, al; CL = c + h / (c - b)
    36 00000031 6689D8                          mov ax, bx; AX = a * d + e
    37 00000034 F6F1                            div cl; AL = (a * d + e) / [c + h / (c - b)]
    38                                          ; exit(0)
    39 00000036 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    40 00000038 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
