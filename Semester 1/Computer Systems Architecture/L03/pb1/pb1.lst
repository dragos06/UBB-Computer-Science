     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 FE                          a db 0FEh
    15 00000001 0501                        b dw 105h
    16 00000003 99000000                    c dd 99h
    17 00000007 1001000000000000            d dq 110h
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; ...
    22 00000000 8A1D[00000000]                  mov bl, byte [a]; BL = a
    23 00000006 B700                            mov bh, 0; BX = a
    24 00000008 66031D[01000000]                add bx, word [b]; BX = a + b
    25 0000000F B900000000                      mov ecx, 0; ECX = 0
    26 00000014 6689D9                          mov cx, bx; ECX = a + b
    27 00000017 BA00000000                      mov edx, 0; EDX = 0
    28 0000001C 030D[07000000]                  add ecx, dword [d]
    29 00000022 1315[0B000000]                  adc edx, dword [d+4]; EDX:ECX = a + b + d
    30 00000028 52                              push edx; SS = EDX
    31 00000029 51                              push ecx; SS = ECX, EDX
    32 0000002A B800000000                      mov eax, 0; EAX = 0
    33 0000002F A0[00000000]                    mov al, byte [a]; EAX = a
    34 00000034 2B05[03000000]                  sub eax, dword [c]; EAX = a - c
    35 0000003A BA00000000                      mov edx, 0; EDX:EAX = a - c
    36 0000003F 0305[07000000]                  add eax, dword [d]
    37 00000045 1315[0B000000]                  adc edx, dword [d+4]; EDX:EAX = a - c + d
    38 0000004B 5B                              pop ebx
    39 0000004C 59                              pop ecx; ECX:EBX = a + b + d
    40 0000004D 29C3                            sub ebx, eax
    41 0000004F 29D1                            sub ecx, edx; ECX:EBX = (a + b + d) - (a - c + d)
    42 00000051 B800000000                      mov eax, 0; EAX = 0
    43 00000056 66A1[01000000]                  mov ax, word [b]; EAX = b
    44 0000005C 2B05[03000000]                  sub eax, dword [c]; EAX = b - c
    45 00000062 BA00000000                      mov edx, 0; EDX:EAX = b - c
    46 00000067 01C3                            add ebx, eax
    47 00000069 11D1                            adc ecx, edx; ECX:EBX = (a + b + d) - (a - c + d) + (b - c)
    48                                          ; exit(0)
    49 0000006B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    50 0000006D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
