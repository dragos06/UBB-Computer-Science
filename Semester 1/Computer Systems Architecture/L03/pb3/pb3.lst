     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 05                          a db 5h
    15 00000001 0001                        b dw 100h
    16 00000003 08                          c db 8h
    17 00000004 00020000                    d dd 200h
    18 00000008 0005000000000000            x dq 500h
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; ...
    23 00000000 A0[00000000]                    mov al, byte [a]; AL = a
    24 00000005 B400                            mov ah, 0; AX = a
    25 00000007 66F725[01000000]                mul word [b]; DX:AX = a * b
    26 0000000E B302                            mov bl, 2; BL = 2
    27 00000010 B700                            mov bh, 0; BX = 2
    28 00000012 66B90000                        mov cx, 0; CX:BX = 2
    29 00000016 6601D8                          add ax, bx
    30 00000019 6611CA                          adc dx, cx; DX:AX = a * b + 2
    31 0000001C 8A1D[00000000]                  mov bl, byte [a]; BL = a
    32 00000022 80C307                          add bl, 7; BL = a + 7
    33 00000025 2A1D[03000000]                  sub bl, byte [c]; BL = a + 7 - c
    34 0000002B B700                            mov bh, 0; BX = a + 7 - c
    35 0000002D 66F7F3                          div bx; AX = (a * b + 2) / (a + 7 - c)
    36 00000030 BB00000000                      mov ebx, 0
    37 00000035 6689C3                          mov bx, ax; EBX = (a * b + 2) / (a + 7 - c)
    38 00000038 031D[04000000]                  add ebx, dword [d]; EBX = (a * b + 2) / (a + 7 - c) + d
    39 0000003E B900000000                      mov ecx, 0; ECX:EBX = (a * b + 2) / (a + 7 - c) + d
    40 00000043 031D[08000000]                  add ebx, dword [x]
    41 00000049 130D[0C000000]                  adc ecx, dword [x+4]; ECX:EBX = (a * b + 2) / (a + 7 - c) + d + x
    42                                          ; exit(0)
    43 0000004F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    44 00000051 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
