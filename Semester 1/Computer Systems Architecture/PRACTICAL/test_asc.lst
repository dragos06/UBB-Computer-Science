     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, scanf, printf, fopen, fclose, fprintf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll
     9                                  import scanf msvcrt.dll
    10                                  import printf msvcrt.dll
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
    14                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    15                                  
    16                                  ; our data is declared here (the variables needed by our program)
    17                                  segment data use32 class=data
    18                                      ; ...
    19 00000000 7700                        access_mode db 'w', 0
    20 00000002 257300                      string_format db '%s', 0
    21 00000005 256400                      number_format db '%d', 0
    22 00000008 25640A00                    number_print_format db '%d',10, 0
    23 0000000C 0000000000000000            file_name dd 0, 0
    24 00000014 FFFFFFFF                    file_descriptor dd -1
    25 00000018 00000000                    number dd 0
    26 0000001C 0A000000                    ten dd 10
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ; ...
    31 00000000 68[0C000000]                    push dword file_name
    32 00000005 68[02000000]                    push dword string_format
    33 0000000A FF15[00000000]                  call [scanf]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36                                          
    37 00000013 68[18000000]                    push dword number
    38 00000018 68[05000000]                    push dword number_format
    39 0000001D FF15[00000000]                  call [scanf]
    40 00000023 83C408                          add esp, 4*2
    41                                          
    42 00000026 68[00000000]                    push dword access_mode
    43 0000002B 68[0C000000]                    push dword file_name
    44 00000030 FF15[00000000]                  call [fopen]
    45 00000036 83C408                          add esp, 4*2
    46 00000039 A3[14000000]                    mov [file_descriptor], eax
    47                                          
    48 0000003E 83F800                          cmp eax, 0
    49 00000041 7458                            je final
    50                                          
    51                                          
    52 00000043 B800000000                      mov eax, 0
    53 00000048 BA00000000                      mov edx, 0
    54                                          bucla:
    55 0000004D 66A1[18000000]                      mov ax, [number]
    56 00000053 668B15[1A000000]                    mov dx, [number+2]
    57 0000005A F73D[1C000000]                      idiv dword [ten]; DX = last digit, AX = remaining digits
    58                                              
    59 00000060 50                                  push eax
    60 00000061 52                                  push edx
    61                                             
    62                                              
    63 00000062 66F7C20100                          test DX, 1
    64 00000067 7517                                jnz continue_bucla
    65                                              
    66 00000069 52                                  push dword edx
    67 0000006A 68[08000000]                        push dword number_print_format
    68 0000006F FF35[14000000]                      push dword [file_descriptor]
    69 00000075 FF15[00000000]                      call [fprintf]
    70 0000007B 83C40C                              add esp, 4*3
    71                                              
    72                                              
    73 0000007E 5A                                  pop edx
    74 0000007F 58                                  pop eax
    75                                              
    76                                              continue_bucla:
    77                                              
    78 00000080 66A3[18000000]                      mov [number], ax
    79 00000086 6683F800                            cmp ax, 0
    80 0000008A 75C1                                jne bucla
    81                                          
    82                                          
    83 0000008C FF35[14000000]                  push dword[file_descriptor]
    84 00000092 FF15[00000000]                  call [fclose]
    85 00000098 83C404                          add esp, 4
    86                                          final:
    87                                          ; exit(0)
    88 0000009B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    89 0000009D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
